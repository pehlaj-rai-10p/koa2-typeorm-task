{"version":3,"file":"index.js","sourceRoot":"","sources":["../../config/index.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAwBnC,MAAM,MAAM,GAAG,OAAO,CAAU;IAC9B,GAAG,EAAE;QACH,MAAM,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,aAAa,CAAC;QAC9C,GAAG,EAAE,UAAU;QACf,GAAG,EAAE,UAAU;QACf,OAAO,EAAE,OAAO;KACjB;IACD,MAAM,EAAE;QACN,IAAI,EAAE;YACJ,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,WAAW;YAChB,OAAO,EAAE,IAAI;SACd;KACF;IACD,GAAG,EAAE;QACH,OAAO,EAAE;YACP,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,aAAa;YAClB,OAAO,EAAE,SAAS;SACnB;KACF;IACD,QAAQ,EAAE;QACR,cAAc,EAAE;YACd,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,WAAW;YAChB,OAAO,EAAE,EAAE;SACZ;QACD,YAAY,EAAE;YACZ,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,oBAAoB;YACzB,OAAO,EAAE,EAAE;SACZ;QACD,IAAI,EAAE;YACJ,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,cAAc;YACnB,OAAO,EAAE,EAAE;SACZ;QACD,IAAI,EAAE;YACJ,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,cAAc;YACnB,OAAO,EAAE,CAAC;SACX;QACD,QAAQ,EAAE;YACR,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,kBAAkB;YACvB,OAAO,EAAE,EAAE;SACZ;QACD,QAAQ,EAAE;YACR,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,kBAAkB;YACvB,OAAO,EAAE,EAAE;SACZ;QACD,QAAQ,EAAE;YACR,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,kBAAkB;YACvB,OAAO,EAAE,EAAE;SACZ;QACD,aAAa,EAAE;YACb,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,wBAAwB;YAC7B,OAAO,EAAE,MAAM;SAChB;QACD,qBAAqB,EAAE;YACrB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,kCAAkC;YACvC,OAAO,EAAE,GAAG;SACb;QACD,qBAAqB,EAAE;YACrB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,iCAAiC;YACtC,OAAO,EAAE,EAAE;SACZ;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAEvC,kBAAe,MAAM,CAAC,aAAa,EAAE,CAAC","sourcesContent":["import * as convict from 'convict';\n\nexport interface IConfig {\n  env: string;\n  server: {\n    port: number;\n  };\n  api: {\n    baseURL: string;\n  };\n  database: {\n    connectionName: string;\n    databaseType: string;\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n    database: string;\n    cacheDuration: number;\n    maxQueryExecutionTime: number;\n    readReplicationSlaves: string;\n  };\n}\n\nconst config = convict<IConfig>({\n  env: {\n    format: ['local', 'production', 'development'],\n    env: 'NODE_ENV',\n    arg: 'node-env',\n    default: 'local',\n  },\n  server: {\n    port: {\n      format: 'port',\n      env: 'NODE_PORT',\n      default: 4001,\n    },\n  },\n  api: {\n    baseURL: {\n      format: String,\n      env: 'API_BASEURL',\n      default: '/api/v1',\n    },\n  },\n  database: {\n    connectionName: {\n      format: String,\n      env: 'CONN_NAME',\n      default: '',\n    },\n    databaseType: {\n      format: String,\n      env: 'TYPEORM_CONNECTION',\n      default: '',\n    },\n    host: {\n      format: String,\n      env: 'TYPEORM_HOST',\n      default: '',\n    },\n    port: {\n      format: 'port',\n      env: 'TYPEORM_PORT',\n      default: 0,\n    },\n    username: {\n      format: String,\n      env: 'TYPEORM_USERNAME',\n      default: '',\n    },\n    password: {\n      format: String,\n      env: 'TYPEORM_PASSWORD',\n      default: '',\n    },\n    database: {\n      format: String,\n      env: 'TYPEORM_DATABASE',\n      default: '',\n    },\n    cacheDuration: {\n      format: Number,\n      env: 'TYPEORM_CACHE_DURATION',\n      default: 360000, // 1 hour\n    },\n    maxQueryExecutionTime: {\n      format: Number,\n      env: 'TYPEORM_MAX_QUERY_EXECUTION_TIME',\n      default: 300,\n    },\n    readReplicationSlaves: {\n      format: String,\n      env: 'TYPEORM_READ_REPLICATION_SLAVES', // comma separated hostnames of read relication slaves\n      default: '',\n    },\n  },\n});\n\nconfig.validate({ allowed: 'strict' });\n\nexport default config.getProperties();\n"]}