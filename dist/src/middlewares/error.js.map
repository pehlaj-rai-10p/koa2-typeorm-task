{"version":3,"file":"error.js","sourceRoot":"","sources":["../../../src/middlewares/error.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6BAA6B;AAC7B,uCAAuC;AAIvC,yCAAkC;AAElC,MAAM,YAAY,GAAG,gBAAM,CAAC,GAAG,KAAK,YAAY,CAAC;AAEjD,MAAM,OAAO,GAAG,CAAO,GAAY,EAAE,IAAgB,EAAE,EAAE;IACvD,IAAI;QACF,MAAM,IAAI,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;YACnB,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SACtC;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,QAAmB,CAAC;QACxB,IAAI,GAAG,CAAC,KAAK,EAAE;YACb,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;SAChC;aAAM,IAAI,GAAG,CAAC,MAAM,EAAE;YACrB,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;SACjC;aAAM;YACL,QAAQ,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,YAAY,EAAE;YACjB,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;SAC5B;QAED,GAAG,CAAC,MAAM,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC9B,GAAG,CAAC,IAAI,GAAG;YACT,IAAI,EAAE,QAAQ;SACf,CAAC;QAEF,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACpB;AACH,CAAC,CAAA,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,GAAS,EAAa,EAAE;IAC/C,OAAO;QACL,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU;QAC9B,OAAO,EAAE,GAAG,CAAC,OAAO;KACrB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,GAAwB,EAAa,EAAE;IAC7D,OAAO;QACL,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO;KAChC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,GAAQ,EAAE,EAAE;IACtC,OAAO;QACL,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG;QAC1B,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,uBAAuB;KAChD,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC","sourcesContent":["import * as Joi from 'joi';\nimport * as Boom from 'boom';\nimport * as compose from 'koa-compose';\nimport { Context } from 'koa';\n\nimport { IMetaData } from '../interfaces/response';\nimport config from '../../config';\n\nconst isProduction = config.env === 'production';\n\nconst handler = async (ctx: Context, next: () => void) => {\n  try {\n    await next();\n    if (!ctx.state.data) {\n      throw Boom.notFound('API not found');\n    }\n  } catch (err) {\n    let metaData: IMetaData;\n    if (err.isJoi) {\n      metaData = handleJoiError(err);\n    } else if (err.isBoom) {\n      metaData = handleBoomError(err);\n    } else {\n      metaData = handleDefaultError(err);\n    }\n    if (!isProduction) {\n      metaData.stack = err.stack;\n    }\n\n    ctx.status = +metaData.status;\n    ctx.body = {\n      meta: metaData,\n    };\n    // TODO: implement logger\n    console.error(err);\n  }\n};\n\nconst handleBoomError = (err: Boom): IMetaData => {\n  return {\n    status: +err.output.statusCode,\n    message: err.message,\n  };\n};\n\nconst handleJoiError = (err: Joi.ValidationError): IMetaData => {\n  return {\n    status: 400,\n    message: err.details[0].message,\n  };\n};\n\nconst handleDefaultError = (err: any) => {\n  return {\n    status: +err.status || 500,\n    message: err.message || 'Something went wrong!',\n  };\n};\n\nexport default () => compose([handler]);\n"]}