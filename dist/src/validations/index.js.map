{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/validations/index.ts"],"names":[],"mappings":";;AAAA,6BAAkG;AAGlG,MAAM,QAAQ,GAAwB;IACpC,GAAG,EAAE,YAAY;CAClB,CAAC;AACF,MAAM,cAAc,GAAsB;IACxC,QAAQ;IACR,YAAY,EAAE,KAAK;CAEpB,CAAC;AAEW,QAAA,QAAQ,GAAG,CAAI,OAAU,EAAE,MAAkB,EAAE,OAA2B,EAAO,EAAE;IAC9F,MAAM,oBAAoB,GAAG,OAAO;QAClC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC;QAC5C,CAAC,CAAC,cAAc,CAAC;IACnB,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,cAAW,CAAC,OAAO,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;IAC5E,IAAI,KAAK,EAAE;QACT,MAAM,KAAK,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import { SchemaLike, validate as joiValidate, LanguageRootOptions, ValidationOptions } from 'joi';\nimport { badRequest } from 'boom';\n\nconst language: LanguageRootOptions = {\n  key: '{{label}} ',\n};\nconst defaultOptions: ValidationOptions = {\n  language,\n  allowUnknown: false,\n  // convert: false,\n};\n\nexport const validate = <T>(payload: T, schema: SchemaLike, options?: ValidationOptions): any => {\n  const joiValidationOptions = options\n    ? Object.assign({}, defaultOptions, options)\n    : defaultOptions;\n  const { error, value } = joiValidate(payload, schema, joiValidationOptions);\n  if (error) {\n    throw error;\n  }\n  return value;\n};\n\n"]}