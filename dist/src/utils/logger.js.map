{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/utils/logger.ts"],"names":[],"mappings":";;AACA,uCAAuC;AACvC,iCAAiC;AACjC,+CAA+C;AAE/C,2BAA2C;AAC3C,+BAAwC;AACxC,6BAA6B;AAE7B,IAAI,YAAoB,CAAC;AAEzB,MAAa,MAAM;IACV,MAAM,CAAC,GAAG,CAAC,MAAc;QAC9B,OAAO,OAAO,CAAC;YAEb,SAAS,CAAC,MAAM,CAAC;YAGjB,SAAS,CAAC,gBAAgB,EAAE;YAG5B,SAAS,CAAC,aAAa,CAAC;gBAEtB,oBAAoB;oBAClB,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBACrF,CAAC;gBAED,qBAAqB,CAAC,IAAS;oBAC7B,OAAO,IAAI,CAAC,MAAM,CAChB,6BAA6B,EAC7B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,IAAI,CAAC,QAAQ,CACd,CAAC;gBACJ,CAAC;aACF,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAOD,YAAY,IAAa,EAAE,GAAmB;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,KAAK,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,WAAQ,CAAC,GAAG,IAAI,SAAS,GAAG,aAAa,CAAC,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG;YACb;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,OAAO,CAAC,MAAM;aACvB;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,WAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;aAC1C;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,WAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;aAC1C;YACD;gBACE,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,WAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC;aACzC;SACF,CAAC;IACJ,CAAC;IAEM,YAAY;QACjB,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAC;SACrB;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,YAAY,GAAG,IAAI,MAAM,CAAC;YACxB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,eAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5B,cAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB;IACH,CAAC;CACF;AAxFD,wBAwFC;AAEY,QAAA,iBAAiB,GAAG,GAAG,EAAE,CAAC,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC,YAAY,EAAE,CAAC","sourcesContent":["import { Middleware } from 'koa';\nimport * as compose from 'koa-compose';\nimport * as Bunyan from 'bunyan';\nimport * as KoaBunyan from 'koa-bunyan-logger';\nimport * as Boom from 'boom';\nimport { mkdirSync, existsSync } from 'fs';\nimport { join as pathJoin } from 'path';\nimport * as util from 'util';\n\nlet globalLogger: Bunyan;\n\nexport class Logger {\n  public static koa(logger: Bunyan): Middleware {\n    return compose([\n      // Attach logger to ctx\n      KoaBunyan(logger),\n\n      // Use child logger for request ctx\n      KoaBunyan.requestIdContext(),\n\n      // Log requests and responses (with custom messages)\n      KoaBunyan.requestLogger({\n        // Request GET /apidoc\n        formatRequestMessage() {\n          return util.format('Request %s %s', this.request.method, this.request.originalUrl);\n        },\n        // Response (200) GET /apidoc in 30ms\n        formatResponseMessage(data: any) {\n          return util.format(\n            'Response (%d) %s %s in %sms',\n            this.status,\n            this.request.method,\n            this.request.originalUrl,\n            data.duration,\n          );\n        },\n      }),\n    ]);\n  }\n\n  private logDir: string;\n  private name: string;\n  private serializers: Bunyan.StdSerializers;\n  private streams: Bunyan.Stream[];\n\n  constructor(name?: string, dir?: string | null) {\n    this.name = name || 'App';\n    this.logDir = pathJoin(dir || __dirname + '/../../logs');\n    this.serializers = Bunyan.stdSerializers;\n    this.streams = [\n      {\n        level: 'debug',\n        stream: process.stdout,\n      },\n      {\n        level: 'debug',\n        type: 'rotating-file',\n        period: '1d',\n        count: 5,\n        path: pathJoin(this.logDir, 'debug.json'),\n      },\n      {\n        level: 'error',\n        type: 'rotating-file',\n        period: '1d',\n        count: 5,\n        path: pathJoin(this.logDir, 'error.json'),\n      },\n      {\n        level: 'warn',\n        type: 'rotating-file',\n        period: '1d',\n        count: 5,\n        path: pathJoin(this.logDir, 'warn.json'),\n      },\n    ];\n  }\n\n  public createLogger(): Bunyan {\n    if (globalLogger) {\n      return globalLogger;\n    }\n\n    this.ensureDirectory();\n\n    globalLogger = new Bunyan({\n      name: this.name,\n      serializers: this.serializers,\n      streams: this.streams,\n    });\n\n    return globalLogger;\n  }\n\n  private ensureDirectory() {\n    if (!existsSync(this.logDir)) {\n      mkdirSync(this.logDir);\n    }\n  }\n}\n\nexport const getLoggerInstance = () => new Logger('koa2-typeorm-boilerplate').createLogger();\n"]}