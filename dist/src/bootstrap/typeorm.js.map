{"version":3,"file":"typeorm.js","sourceRoot":"","sources":["../../../src/bootstrap/typeorm.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAMiB;AACjB,yCAAkC;AAClC,4CAAoD;AACpD,MAAM,MAAM,GAAG,0BAAiB,EAAE,CAAC;AAEnC,MAAM,cAAc;IAApB;QACS,aAAQ,GAAG,CAAC,KAAa,EAAE,UAAkB,EAAO,EAAE;YAC3D,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACjC,CAAC,CAAC;QAEK,kBAAa,GAAG,CAAC,KAAa,EAAE,KAAa,EAAE,UAAkB,EAAO,EAAE;YAC/E,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC;QAEK,iBAAY,GAAG,CAAC,IAAY,EAAE,KAAa,EAAE,UAAkB,EAAO,EAAE;YAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QACvC,CAAC,CAAC;QAEK,iBAAY,GAAG,CAAC,OAAe,EAAO,EAAE;YAC7C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC,CAAC;QAEK,mBAAc,GAAG,CAAC,OAAe,EAAO,EAAE;YAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC,CAAC;QAEK,QAAG,GAAG,CAAC,KAAwC,EAAE,OAAY,EAAO,EAAE;YAC3E,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;CAAA;AAEY,QAAA,iBAAiB,GAAG,GAAuB,EAAE;IACxD,MAAM,iBAAiB,GAAsB,MAAM,8BAAoB,EAAE,CAAC;IAE1E,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;QAC/B,OAAO,EAAE,CAAC,OAAO,CAAC;QAClB,MAAM,EAAE,IAAI,cAAc,EAAE;QAC5B,WAAW,EAAE,KAAK;QAClB,qBAAqB,EAAE,gBAAM,CAAC,QAAQ,CAAC,qBAAqB;KAC7D,CAAC,CAAC;IACH,OAAO,0BAAgB,CAAC,iBAAiB,CAAC,CAAC;AAC7C,CAAC,CAAA,CAAC;AAEW,QAAA,kBAAkB,GAAG,GAAuB,EAAE;IACzD,MAAM,UAAU,GAAG,uBAAa,EAAE,CAAC;IACnC,OAAO,UAAU,CAAC,gBAAiB,CAAC,KAAK,EAAE,CAAC;AAC9C,CAAC,CAAA,CAAC","sourcesContent":["import {\n  createConnection,\n  getConnectionOptions,\n  ConnectionOptions,\n  Logger,\n  getConnection,\n} from 'typeorm';\nimport config from '../../config';\nimport { getLoggerInstance } from '../utils/logger';\nconst logger = getLoggerInstance();\n\nclass DatabaseLogger implements Logger {\n  public logQuery = (query: string, parameters?: any[]): any => {\n    logger.info(query, parameters);\n  };\n\n  public logQueryError = (error: string, query: string, parameters?: any[]): any => {\n    logger.error(error, query, parameters);\n  };\n\n  public logQuerySlow = (time: number, query: string, parameters?: any[]): any => {\n    logger.warn(time, query, parameters);\n  };\n\n  public logMigration = (message: string): any => {\n    logger.info(message);\n  };\n\n  public logSchemaBuild = (message: string): any => {\n    logger.info(message);\n  };\n\n  public log = (level: 'log' | 'info' | 'warn' | 'error', message: any): any => {\n    logger.info(level, message);\n  };\n}\n\nexport const bootstrapDatabase = async (): Promise<any> => {\n  const connectionOptions: ConnectionOptions = await getConnectionOptions();\n\n  Object.assign(connectionOptions, {\n    logging: ['error'],\n    logger: new DatabaseLogger(),\n    synchronize: false,\n    maxQueryExecutionTime: config.database.maxQueryExecutionTime,\n  });\n  return createConnection(connectionOptions);\n};\n\nexport const clearDatabaseCache = async (): Promise<any> => {\n  const connection = getConnection();\n  return connection.queryResultCache!.clear();\n};\n"]}